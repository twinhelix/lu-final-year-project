package eee;

import agent.IExpert;
import environment.GameHistory;
import expert.AbstractExpert;

/***
 * The Exploration-Exploitation Experts method (EEE)
 * 
 * @author HassassiN
 * 
 */
public class ExploreExploitExpert extends AbstractExpert {

	private class Advisor {
		/***
		 * Variables needed:
		 * 
		 * A maximal set of consecutive stages during which the same expert is
		 * followed is called a phase.
		 * 
		 * i = Phase number
		 * 
		 * ne = number of phases expert e has been followed
		 * 
		 * se = the total number of stages during which expert e has been
		 * followed
		 * 
		 * me = average reward from phases in which expert e has been followed
		 */

		IExpert expert;
		int me, ne, se, i;

	}

	// Array of experts that the EEE algorithm can employ
	private Advisor[] advisors;
	private IExpert currentExpert;
	// Values needed
	private double prob;
	private boolean exploit;
	private int agentChoice;

	public ExploreExploitExpert(int playerNo, String[] strategies) {
		this(playerNo, strategies, 0.7);

	}

	public ExploreExploitExpert(int playerNo, String[] strategies, double prob) {
		super(playerNo);
		this.prob = prob;
		agentChoice = 0;
		exploit = false;
		advisors = populateExpertArray(strategies);
		populateAdvisers();
	}

	private Advisor[] populateExpertArray(String[] strategies) {
		// TODO Auto-generated method stub
		return null;
	}

	private void populateAdvisers() {

	}

	@Override
	public String getName() {
		return "Explore Exploit Expert";
	}

	@Override
	public boolean move(GameHistory history) {

		/**
		 * —Exploration. An exploration phase consists of picking a random
		 * expert e (i.e., from the uniform distribution over {1, . . . , r }),
		 * and following e’s recommendations for a certain number of stages
		 * depending on the variant of the method.
		 * 
		 * —Exploitation. An exploitation phase consists of picking an expert e
		 * with maximum Me, breaking ties at random, and following e’s
		 * recommendations for a certain number of stages depending on the
		 * variant of the method.
		 */
		if (history.getNumberOfMoves() != 0){
			updateScores();
		}
		if (advisors != null) {

			double exploreProb = Math.random();
			if (!exploit) {
				if (exploreProb < prob) {
					// Perform Exploration phase

					agentChoice = (int) (Math.random() * (advisors.length)) - 1;
					currentExpert = advisors[agentChoice].expert;
					
					exploit(history);
					//moves--;
					
				} else {
					// Perform Exploitation phase - Follow current expert for n
					// moves
					exploit(history);
				}
			}
		}
		return false;

	}
	private boolean exploit(GameHistory history){
		history.getHistory();
		return false;
	}

	private void updateScores() {
		// TODO Auto-generated method stub
		
	}
}
